/**
 * Portfolio JavaScript - Ultra Optimized Version
 * @author Mohamed Essyad
 * @version 2.0.0
 */

class PortfolioApp {
  constructor() {
    this.init();
  }

  init() {
    // Wait for DOM to be fully loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.start());
    } else {
      this.start();
    }
  }

  start() {
    this.initPageLoader();
    this.initScrollProgress();
    this.initNavigation();
    this.initThemeToggle();
    this.initDownloadButton();
    this.initContactForm();
    this.initScrollEffects();
    this.initAccessModal();
    this.initAnimations();
    this.initSkillBars();
  }

  // ==================== PAGE LOADER ====================
  initPageLoader() {
    const loader = document.getElementById('page-loader');
    if (!loader) return;

    window.addEventListener('load', () => {
      setTimeout(() => {
        loader.style.opacity = '0';
        setTimeout(() => {
          loader.style.display = 'none';
        }, 500);
      }, 800);
    });
  }

  // ==================== SCROLL PROGRESS ====================
  initScrollProgress() {
    const progressBar = document.getElementById('scroll-progress');
    if (!progressBar) return;

    const updateProgress = () => {
      const windowScroll = document.documentElement.scrollTop || document.body.scrollTop;
      const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (windowScroll / height) * 100;
      progressBar.style.width = scrolled + '%';
    };

    window.addEventListener('scroll', updateProgress, { passive: true });
  }

  // ==================== NAVIGATION ====================
  initNavigation() {
    const navToggle = document.getElementById('navToggle');
    const navMenu = document.getElementById('navMenu');
    const navLinks = document.querySelectorAll('.nav-link');

    if (!navToggle || !navMenu) return;

    navToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      navMenu.classList.toggle('show');
      navToggle.classList.toggle('active');
    });

    // Close menu on link click
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        navMenu.classList.remove('show');
        navToggle.classList.remove('active');
      });
    });

    // Close menu on outside click
    document.addEventListener('click', (e) => {
      if (!navToggle.contains(e.target) && !navMenu.contains(e.target)) {
        navMenu.classList.remove('show');
        navToggle.classList.remove('active');
      }
    });

    // Show/hide nav on scroll
    let lastScroll = 0;
    const nav = document.querySelector('nav');

    window.addEventListener('scroll', () => {
      const currentScroll = window.pageYOffset;

      if (currentScroll > 100) {
        nav.classList.add('scrolled');
      } else {
        nav.classList.remove('scrolled');
      }

      lastScroll = currentScroll;
    }, { passive: true });
  }

  // ==================== THEME TOGGLE ====================
  initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    if (!themeToggle) return;

    // Check for saved theme preference or default to dark
    const currentTheme = localStorage.getItem('theme') || 'dark';
    document.documentElement.setAttribute('data-theme', currentTheme);

    themeToggle.addEventListener('click', () => {
      const theme = document.documentElement.getAttribute('data-theme');
      const newTheme = theme === 'dark' ? 'light' : 'dark';

      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);

      // Update icon
      const icon = themeToggle.querySelector('i');
      if (icon) {
        icon.className = newTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
      }
    });
  }

  // ==================== CV DOWNLOAD ====================
  initDownloadButton() {
    const downloadButton = document.querySelector('.cv-download-button');
    if (!downloadButton) return;

    downloadButton.addEventListener('click', async () => {
      try {
        downloadButton.classList.add('active');

        await this.delay(2000);
        downloadButton.classList.add('complete');

        // Download CV
        const link = document.createElement('a');
        link.href = 'assets/cv/Mohamed-Essyad-CV.pdf';
        link.download = 'Mohamed-Essyad-CV.pdf';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        this.showNotification('CV téléchargé avec succès !', 'success');

        await this.delay(3000);
        downloadButton.classList.remove('active', 'complete');
      } catch (error) {
        console.error('Download error:', error);
        this.showNotification('Erreur lors du téléchargement', 'error');
        downloadButton.classList.remove('active', 'complete');
      }
    });
  }

  // ==================== CONTACT FORM ====================
  initContactForm() {
    const contactForm = document.getElementById('contactForm');
    if (!contactForm) return;

    contactForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = this.getFormData(contactForm);

      if (!this.validateForm(formData)) return;

      await this.submitForm(contactForm, formData);
    });
  }

  getFormData(form) {
    return {
      name: form.querySelector('#name')?.value.trim() || '',
      email: form.querySelector('#email')?.value.trim() || '',
      subject: form.querySelector('#subject')?.value.trim() || '',
      message: form.querySelector('#message')?.value.trim() || ''
    };
  }

  validateForm({ name, email, subject, message }) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!name || !email || !subject || !message) {
      this.showNotification('Veuillez remplir tous les champs', 'error');
      return false;
    }

    if (!emailRegex.test(email)) {
      this.showNotification('Veuillez entrer une adresse email valide', 'error');
      return false;
    }

    return true;
  }

  async submitForm(form, data) {
    const submitBtn = form.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;

    try {
      submitBtn.disabled = true;
      submitBtn.textContent = 'Envoi en cours...';

      const formData = new FormData();
      formData.append('name', data.name);
      formData.append('_replyto', data.email);
      formData.append('_subject', data.subject);
      formData.append('message', data.message);

      const response = await fetch('https://formspree.io/f/manedwjq', {
        method: 'POST',
        body: formData,
        headers: { 'Accept': 'application/json' }
      });

      if (response.ok) {
        form.reset();
        this.showNotification('Message envoyé avec succès !', 'success');
      } else {
        throw new Error('Form submission failed');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      this.showNotification('Erreur lors de l\'envoi. Veuillez réessayer.', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    }
  }

  // ==================== SCROLL EFFECTS ====================
  initScrollEffects() {
    const sections = document.querySelectorAll('section');
    const navLinks = document.querySelectorAll('.nav-link');

    const observerOptions = {
      threshold: 0.3,
      rootMargin: '-50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          this.updateActiveNavLink(navLinks, sectionId);
        }
      });
    }, observerOptions);

    sections.forEach(section => observer.observe(section));
  }

  updateActiveNavLink(navLinks, activeSectionId) {
    navLinks.forEach(link => {
      link.classList.remove('active');
      if (link.getAttribute('href') === `#${activeSectionId}`) {
        link.classList.add('active');
      }
    });
  }

  // ==================== ACCESS MODAL ====================
  initAccessModal() {
    const modal = document.getElementById('accessDeniedModal');
    if (!modal) return;

    // Update all restricted links
    const restrictedLinks = document.querySelectorAll('[onclick*="triggerAccessDenied"]');
    restrictedLinks.forEach(link => {
      link.removeAttribute('onclick');
      link.addEventListener('click', (e) => {
        e.preventDefault();
        this.showAccessDeniedModal();
      });
    });

    // Close modal handlers
    const closeBtn = modal.querySelector('.modal-close');
    if (closeBtn) {
      closeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.hideAccessDeniedModal();
      });
    }

    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        this.hideAccessDeniedModal();
      }
    });

    // Contact redirect from modal
    const contactBtn = modal.querySelector('#redirectToContact');
    if (contactBtn) {
      contactBtn.addEventListener('click', (e) => {
        e.preventDefault();
        this.hideAccessDeniedModal();
        this.scrollToSection('contact');
      });
    }
  }

  showAccessDeniedModal() {
    const modal = document.getElementById('accessDeniedModal');
    if (!modal) return;

    modal.classList.add('visible');

    // Animate terminal lines
    const outputLines = modal.querySelectorAll('.terminal-output .output-line');
    outputLines.forEach((line, index) => {
      setTimeout(() => line.classList.add('active'), 300 * index);
    });
  }

  hideAccessDeniedModal() {
    const modal = document.getElementById('accessDeniedModal');
    if (modal) {
      modal.classList.remove('visible');
    }
  }

  // ==================== ANIMATIONS ====================
  initAnimations() {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');

    if (animatedElements.length === 0) return;

    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animated');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    animatedElements.forEach(el => observer.observe(el));
  }

  // ==================== SKILL BARS ====================
  initSkillBars() {
    const skillBars = document.querySelectorAll('.skill-progress');

    if (skillBars.length === 0) return;

    const observerOptions = {
      threshold: 0.5
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const bar = entry.target;
          const width = bar.style.width;
          bar.style.width = '0';

          setTimeout(() => {
            bar.style.width = width;
          }, 200);

          observer.unobserve(bar);
        }
      });
    }, observerOptions);

    skillBars.forEach(bar => observer.observe(bar));
  }

  // ==================== UTILITY METHODS ====================
  scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  showNotification(message, type = 'info') {
    let notification = document.querySelector('.notification');

    if (!notification) {
      notification = document.createElement('div');
      notification.className = 'notification';
      document.body.appendChild(notification);
    }

    notification.textContent = message;
    notification.className = `notification ${type} show`;

    setTimeout(() => {
      notification.classList.remove('show');
    }, 5000);
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Global function for backward compatibility
window.triggerAccessDenied = function() {
  if (window.portfolioApp) {
    window.portfolioApp.showAccessDeniedModal();
  }
  return false;
};

// Initialize Portfolio App
window.portfolioApp = new PortfolioApp();

// Service Worker Registration (for PWA)
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then(registration => console.log('SW registered:', registration))
      .catch(error => console.log('SW registration failed:', error));
  });
}
